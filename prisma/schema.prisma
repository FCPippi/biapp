generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  HOMEM
  MULHER
  OUTRO
}

enum Graduation {
  EXATAS
  HUMANAS
  BIOLOGICAS
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String     @id @default(uuid())
  name       String     
  email      String
  birthdate  DateTime   @db.Date
  password   String
  role       Role       @default(USER)
  graduation Graduation
  gender     Gender
  imageUrl   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ratingsGiven    Rating[] @relation("ratingsGiven")
  ratingsReceived Rating[] @relation("ratingsReceived")

  jobPosts      JobPost[]    @relation("jobPosts")
  jobRequests   JobRequest[] @relation("jobRequests")

  isDeleted     Boolean @default(false)
  emailVerified Boolean @default(false)

  conversations Conversation[] @relation("ConversationParticipants")
  messagesSent  Message[]      @relation("MessageAuthor")

  reports Report[]
}

model Rating {
  id          String   @id @default(uuid())
  value       Int
  createdAt   DateTime @default(now())

  authorId    String
  author      User   @relation("ratingsGiven", fields: [authorId], references: [id])

  recipientId String
  recipient   User   @relation("ratingsReceived", fields: [recipientId], references: [id])

  comment     String?


  @@index([authorId])
  @@index([recipientId])
}

model JobPost {
  id          String     @id @default(uuid())
  studentId   String
  student     User       @relation("jobPosts", fields: [studentId], references: [id])
  graduation  Graduation
  title       String
  description String
  value       Float
  imageUrl    String?
  isClosed    Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model JobRequest {
  id          String     @id @default(uuid())
  title       String
  description String
  graduation  Graduation
  studentId   String
  student     User       @relation("jobRequests", fields: [studentId], references: [id])
  isClosed    Boolean    @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  authorId       String
  author         User         @relation("MessageAuthor", fields: [authorId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Report {
  id           String   @id @default(uuid())
  reporterId   String  

  reportedId   String  
  reportedType String   

  reason       String   
  
  createdAt    DateTime @default(now())

  reporter     User     @relation(fields: [reporterId], references: [id])

  @@index([reportedId, reportedType])
  @@index([reporterId])
}